"""Update cart item tool implementation using the unified base class."""
from typing import List, ClassVar, Type
from pydantic import BaseModel, Field

from shared.tool_utils.base_tool import BaseTool, ToolTestCase
from .cart_inventory_manager import CartInventoryManager
from .models import UpdateCartItemOutput


class UpdateCartItemTool(BaseTool):
    """Tool for updating quantities of items in the shopping cart."""
    
    NAME: ClassVar[str] = "update_cart_item"
    MODULE: ClassVar[str] = "tools.ecommerce.update_cart_item"
    
    class Arguments(BaseModel):
        """Arguments for updating cart item."""
        product_id: str = Field(..., description="Product ID to update")
        new_quantity: int = Field(..., ge=0, description="New quantity (0 to remove)")
    
    # Tool definition as instance attributes
    description: str = "Update the quantity of an item in the shopping cart"
    args_model: Type[BaseModel] = Arguments
    
    def execute_with_user_id(self, user_id: str, product_id: str, new_quantity: int) -> dict:
        """Execute the tool to update cart item."""
        # Use CartInventoryManager for operations
        manager = CartInventoryManager()
        
        # Update cart item using the manager
        result: UpdateCartItemOutput = manager.update_cart_item(user_id, product_id, new_quantity)
        
        # Convert Pydantic model to dict for response
        return result.model_dump(exclude_none=True)
    
    @classmethod
    def get_test_cases(cls) -> List[ToolTestCase]:
        """Return test cases for this tool."""
        return [
            ToolTestCase(
                request="Change the quantity of PROD123 in my cart to 5",
                expected_tools=["update_cart_item"],
                description="Update item quantity"
            ),
            ToolTestCase(
                request="Remove PROD456 from my cart",
                expected_tools=["update_cart_item"],
                description="Remove item from cart"
            )
        ]